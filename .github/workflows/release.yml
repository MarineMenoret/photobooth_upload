# This is a basic workflow to help you get started with Actions

name: Auto-update Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the auto-updater branch
  push:
    branches: [ auto-updater ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# jobs:
#   release:
#     name: Release
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@auto-updater
#       - uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npm run electron:build --if-present
# #       - run: npm test
#       - run: npx semantic-release --branches auto-updater
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# jobs:
#   release:
#     name: Release
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npm run build --if-present
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# jobs:
#   build:
#     name: Create Release
#     # runs-on: ubuntu-latest
#     # runs-on: macos-latest
#     runs-on: windows-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Fetching version from package.json
#         shell: pwsh
#         run: |
#           $version = node -p "require('./package.json').version"
#           echo "VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
#       - name: Release version number
#         run: |
#           echo "${{ env.VERSION }}"
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token comes from package.json
#         with:
#           tag_name: v${{env.VERSION}}  - ${{env.SHORT_SHA}}
#           release_name: v${{env.VERSION}} 
#           draft: true
#           prerelease: false

# jobs:
#   build:
#     name: Create Release
#     runs-on: windows-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Fetching version from package.json
#         shell: pwsh
#         run: |
#           $version = node -p "require('./package.json').version"
#           echo "VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
#       - name: Release version number
#         run: |
#           echo "${{ env.VERSION }}"
#       - name : Getting commit hash
#         shell: bash
#         run: |
#           echo "COMMIT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
#       - name: Printing commit hash 8 first characters
#         run: |
#           echo "The sha: "
#           echo "${{env.COMMIT_SHA}}"
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token comes from package.json
#         with:
#           tag_name: v${{env.VERSION}} - ${{env.COMMIT_SHA}} # ex: v1.0.0-abcd1234
#           release_name: v${{env.VERSION}} - ${{env.COMMIT_SHA}} # same as tag_name
#           draft: true
#           prerelease: false

jobs:
  build:
    name: Create Release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Fetching version from package.json
        shell: pwsh
        run: |
          $version = node -p "require('./package.json').version"
          echo "VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Release version number
        run: |
          echo "${{ env.VERSION }}"
      - name : Getting commit hash
        shell: bash
        run: |
          echo "COMMIT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Printing commit hash 8 first characters
        run: |
          echo "The sha: "
          echo "${{env.COMMIT_SHA}}"
          npm run electron:build
          mkdir test
          cp main.ts test
          Compress-Archive test test.zip
          Remove-Item -LiteralPath 'test' -Force -Recurse
      - name: Printing bob dir
        run: |
          dir
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token comes from package.json
        with:
          tag_name: v${{env.VERSION}}-${{env.COMMIT_SHA}} # ex: v1.0.0-abcd1234
          release_name: v${{env.VERSION}}-${{env.COMMIT_SHA}} # same as tag_name
          draft: true
          prerelease: false     
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./test.zip
          asset_name: test.zip
          asset_content_type: application/zip
